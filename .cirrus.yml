# ========================================
# Release Tasks
# ========================================

env:
  REPO: you54f/ruby-packer
  PKG_DATE: 20230812
  NEXT_TAG: rel-$PKG_DATE
  PUBLISH_BRANCH: ci_test
  GITHUB_TOKEN: ENCRYPTED[0dbc5b1451b523311b9a9987d31c308598ce6ecd0aae8bf3e7b54613e2bfbde050d97845e951bf0153d9c402dc57d6a7]

INSTALL_GH_CLI: &INSTALL_GH_CLI
  install_gh_cli_script: |
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && apt update \
    && apt install gh -y

PRE_RELEASE_TASK: &PRE_RELEASE_TASK
  prerelease_script: |
    RELEASE_NOTES=$(git log --pretty=format:"%s" $(git describe --tags --abbrev=0)..HEAD)
    gh release create "${NEXT_TAG}" --prerelease --draft --repo "${REPO}" --title "${NEXT_TAG}" --notes "${RELEASE_NOTES}"

UPLOAD_TASK: &UPLOAD_TASK
  upload_script: |
    mkdir -p pkg
    RUBYC_FILENAME=rubyc-$(uname -s)-$(uname -m)
    RUBYC_ARCHIVE_FILENAME=${RUBYC_FILENAME}.tar.gz
    cp rubyc pkg/rubyc-$(uname -s)-$(uname -m)
    cd pkg
    gzip $RUBYC_FILENAME -c > $RUBYC_ARCHIVE_FILENAME
    echo "RUBYC_FILENAME=$RUBYC_FILENAME" >> $CIRRUS_ENV
    echo "RUBYC_ARCHIVE_FILENAME=$RUBYC_ARCHIVE_FILENAME" >> $CIRRUS_ENV
    ls -l
    if [[ $CIRRUS_BRANCH == $PUBLISH_BRANCH ]]; then
      export GH_TOKEN=$GITHUB_TOKEN
      gh release upload "${NEXT_TAG}" $RUBYC_ARCHIVE_FILENAME --repo "${REPO}" --clobber
    else
      echo "Not on $PUBLISH_BRANCH branch, skipping upload"
    fi

DOWNLOAD_TASK: &DOWNLOAD_TASK
  download_script: |
    gh release download  "${NEXT_TAG}" --repo "${REPO}" -p *$PLATFORM-$CIRRUS_ARCH*

BINARY_ARTIFACTS: &BINARY_ARTIFACTS
  binary_artifacts:
    path: pkg/*.tar.gz
    
## General tasks for GitHub Releases
## These tasks are used to create a release, upload the binaries
## and download the binaries for testing

## The available tasks are:
## prerelease_task: Creates a prerelease
## release_task: Creates a release
## upload_task: Uploads the binaries to the release
## download_task: Downloads the binaries from the release

prerelease_task:
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(prerelease\).*'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  env:
    GH_TOKEN: $GITHUB_TOKEN
  <<: *PRE_RELEASE_TASK

upload_task:
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(upload\).*'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  env:
    GH_TOKEN: $GITHUB_TOKEN
  <<: *UPLOAD_TASK

# release_task: 
#   macos_instance:
#     image: ghcr.io/cirruslabs/macos-ventura-base:latest
#   env:
#     GH_TOKEN: $GITHUB_TOKEN
#   <<: *RELEASE_TASK

download_task:
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(download\).*'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  env:
    GH_TOKEN: $GITHUB_TOKEN
  <<: *DOWNLOAD_TASK
  script: ls


# ========================================
# Builder Tasks
# ========================================


macos_arm_task: 
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  ruby_version_script: ruby --version
  env:
    BISON_PATH: "/opt/homebrew/opt/bison/bin"
    # OPENSSL_1_1_PATH: "/opt/homebrew/opt/openssl@1.1/lib"
    PATH: "$BISON_PATH:$PATH"
  openssl_tweak_for_cirrus_ci_script: |
    brew unlink openssl
    brew install openssl@1.1
    brew link openssl@1.1
  cirrus_cli_script: |
    chmod +x bin/*
    find . -name '*onfigure' -type f | xargs chmod +x
    find . -name '*.sh' -type f | xargs chmod +x
    find .  -name 'install-sh' -type f | xargs chmod +x
  deps_script: |
    brew install automake texinfo libtool squashfs bison
  get_ruby_source_and_patch_script: |
    ./patch_ruby_source.sh
  build_script: |
    bin/rubyc bin/rubyc -o rubyc --openssl-dir=/opt/homebrew/opt/openssl@1.1
  test_script: |
    chmod +x ./rubyc
    ./rubyc --help
  mv_binary_script: |
      mkdir -p pkg
      cp rubyc pkg/rubyc-$(uname -s)-$(uname -m)
  <<: *UPLOAD_TASK
  <<: *BINARY_ARTIFACTS
  # package_script: |
  #   mkdir pkg
  #   mv rubyc pkg/rubyc-darwin-arm64
# DYLD_LIBRARY_PATH=/opt/homebrew/opt/openssl@1.1/lib rubyc --help

task:
  matrix:
    - arm_container:
        matrix:
          - dockerfile: Dockerfile
    - container:
        matrix:
          - dockerfile: Dockerfile
  test_script: |
    rubyc --help
    rubyc --version
    rubyc --ruby-version
    rubyc --ruby-api-version
  mv_binary_script: |
    mkdir -p pkg
    cp /usr/local/bin/rubyc pkg/rubyc-$(uname -s)-$(uname -m)
  setup_gh_cli_script: |
    if [ "$(uname -m)" == 'x86_64' ]; then
            GH_CLI_ARCH=amd64
    elif [ "$(uname -m)" == 'aarch64' ]; then
            GH_CLI_ARCH=arm64
    else
            echo "Unknown architecture $(uname -m)"
            exit 1
    fi
    curl -L https://github.com/cli/cli/releases/download/v2.32.1/gh_2.32.1_linux_$GH_CLI_ARCH.tar.gz | tar xz
    mv gh_2.32.1_linux_$GH_CLI_ARCH/bin/gh /usr/local/bin
    rm -rf gh_2.32.1_linux_$GH_CLI_ARCH
  <<: *UPLOAD_TASK
  <<: *BINARY_ARTIFACTS